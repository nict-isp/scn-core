===============
アーキテクチャ
===============

SCNの構成
==========

* SCNは、 **アプリケーションレイヤ** 、 **ミドルウェアレイヤ** 、 **ネットワークレイヤ** の3レイヤに分かれています。

アプリケーションレイヤ
-----------------------
* アプリケーションレイヤでは情報サービスが稼働し、様々なデータソースからデータを収集します。
* 「このようなデータが欲しい」という要求をDSNで定義し、SCNミドルウェアに対して入力します。

ミドルウェアレイヤ
-------------------
* ミドルウェアレイヤはSCN Coreが稼働し、アプリケーションレイヤから受け取ったDSNを解釈および実行し
  イベント検出やIn-Network Data Processingを行います。
* DSNで定義された内容に従い、サービス検索やサービス連携の管理を行います。
* また、アプリケーションレイヤから受け取ったデータを送信する際のパスの計算や生成を行います。

ネットワークレイヤ
-------------------
* ネットワークトポロジの検出やネットワークトラフィックの監視を行います。
* 要求されたQoSを満たすよう、ネットワークトラフィックに応じてフローを動的に切り替えます。

.. image:: img/fig-architecture-1.png
      :width: 500px
      :align: center



SCN Coreの構成
===============

* SCN Coreは、 **DSN** 、 **Translator** 、 **NCPS** の3コンポーネントに分かれています。

.. image:: img/fig-architecture-2.png
      :width: 200px
      :align: center


* 各コンポーネントの処理について説明します。

DSN
----

.. image:: img/fig-architecture-3.png
      :width: 800px
      :align: center

* DSNは、入力されたDSN記述を解釈し、Translatorに対してサービス検索やサービス連携の生成を指示します。
* DSN記述に定義されたイベント情報を管理し、Translatorから取得したQoSイベント通知や統計情報から、
  イベントの発生を判断します。
* フィルタリングや集約などの、網内データ処理（In-Network Data Processing）を実現します。


Translator
-----------

.. image:: img/fig-architecture-4.png
      :width: 800px
      :align: center

* Translatorは、サービス、およびサービス連携の情報を管理します。
* DSNレイヤからの指示を受け、Translatorで管理しているサービスを検索したり、
  パスの経路を計算し、NCPSに対して経路の生成を指示します。
* NCPSに対してネットワーク構造や統計情報を取得し、パスの経路計算に利用したり、
  DSNに通知してイベントの判定に利用します。


NCPS
-----

.. image:: img/fig-architecture-5.png
      :width: 800px
      :align: center

* NCPSは、ネットワーク構造や統計情報を収集し、Translatorへ通知します。
* Translatorから指示された経路生成の指示に従い、必要なネットワークの設定を実施します。
* ネットワークレイヤとしてOpenFlowを使用した場合は、SCN OpenFlow Driverに対してフローの設定を指示したりします。


コンフィグ
===========

* SCN Coreで設定可能なコンフィグについて説明します。


ログ設定
---------

* ログレベルは、以下を指定可能です。

=========== ====================================
ログレベル  出力されるメッセージ
=========== ====================================
FATAL       FATALのみ
ERROR       FATAL + ERROR
WARN        FATAL + ERROR + WARN
INFO        FATAL + ERROR + WARN + INFO
DEBUG       FATAL + ERROR + WARN + INFO + DEBUG
=========== ====================================

::

  # ログレベル
  $logger.level = Logger::INFO


ログ情報・ステータスの送信先設定
---------------------------------
::

  # fluend設定
  @fluent_port       = 24224
  @fluent_ip_address = "172.18.102.1"


アプリケーションとの通信のためのRPC設定
----------------------------------------
::

  # RPC初期受信用ポート
  @rpc_initial_rx_port = 10000

  # RPC受信用ポート
  @rpc_rx_port = 21001

  # RPC送信用基底ポート
  @rpc_tx_port_base = 22000

  # RPC送信IPアドレス
  @rpc_ip_address = "127.0.0.1"



Translatorの動作周期設定
-------------------------

::

  # ノード情報の送信周期[s]
  @statistics_interval = 30



NCPSのネットワーク種別設定
^^^^^^^^^^^^^^^^^
* ネットワーク種別は、以下を指定可能です。

================= =======================================
ネットワーク種別  説明
================= =======================================
OpenFlow          ネットワークレイヤとしてOpenFlowを使用
TCP               ネットワークレイヤとしてTCP/IPを使用
================= =======================================

::

  # ネットワーク種別
  $ncps_network = "OpenFlow"


データ通信用ポート設定
^^^^^^^^^^^^^^^^^^^^^^^
::

    # データメッセージ用基底ポート
    @data_port_base = 11001

    # データメッセージ用ポートの上限
    @data_port_max = 20000

    # コントロールメッセージ用ポート
    @ctrl_port = 20001


SCN OpenFlow Driverとの通信設定
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
::

  # SCN OpenFlow Driverとの通信用ポート
  @cmd_port = 31001


